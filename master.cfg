# -*- python -*-
# ex: set syntax=python:

# This is the buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#=========================================================================
#  Shared Globals
#=========================================================================
##### Web Locators
# Buildbot http server
BB_PORT=str(8010)
# URL where buildbot's internal web server is visible
BUILDBOT_URL="http://lsst-buildx.ncsa.illinois.edu:"+BB_PORT+"/"

# Web access to DM git repositories
LSST_DMS="git@git.lsstcorp.org:LSST/DMS/"
# FUTURE: Web access for DM documentation
DOXY_URL="http://lsst-web.ncsa.illinois.edu/~buildbot/doxygen"
DOXY_DEST="lsst-build3.ncsa.illinois.edu:/lsst/home/buildbot/public_html/doxygen"

# Slave systems - all are available only 2 are currently used
#BUILDBOT_SLAVE1="lsst-buildx1.ncsa.illinois.edu"
BUILDBOT_SLAVE2="lsst-buildx2.ncsa.illinois.edu"
#BUILDBOT_SLAVE3="lsst-buildx3.ncsa.illinois.edu"
BUILDBOT_SLAVE8="lsst-dev.ncsa.illinois.edu"

# Slave Aliases (can have multiple aliases hosted on same slave)
REBUILD_SLAVE         = BUILDBOT_SLAVE2
STACK_SLAVE           = BUILDBOT_SLAVE8

# Master's Authentication file
HTPASSWD='/usr/local/home/buildbot/master/.htpasswd'

# Slaves' Primary Directories 
BUILDBOT_HOME = "/lsst/home/buildbot/RHEL6/"
SLAVE_HOME_DIR = BUILDBOT_HOME+"/buildslaves"
SLAVE_BUILDS_DIR = BUILDBOT_HOME+"/builds"
SLAVE_SCRIPTS_DIR = BUILDBOT_HOME+ "/scripts"

# Make sure whatever email provided below is listserv-allowed.
BUILDBOT_EMAIL="robyn@lsst.org"
LSST_DATA_EMAIL="lsst-data@lsstcorp.org"

####### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

####
# These slave names match the subdirectory where the build logs are maintained.
#        and where the buildslave's configuration is found. Keep this template.
#
# Passwords are recorded in BbConfig.py so master.cfg can be git-archived.
import BbConfig
SlavePassword = BbConfig.getSecret()

c['slaves'] = [
    BuildSlave("BUILDBOT_SLAVE1", SlavePassword, notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE2", SlavePassword, notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE3", SlavePassword, notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE8", SlavePassword, notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1)
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured in the buildslaves (w/ --master option)
c['slavePortnum'] = 9989


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  

from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler

c['schedulers'] = []
c['schedulers'].append(Nightly(name="nightlyBuild",
     hour=16, minute=5, 
     builderNames=["DM_stack"], branch='master'))
c['schedulers'].append(ForceScheduler(name="force",
    builderNames=["rebuild", "DM_stack"]))

####### LOCKS

from buildbot import locks

# Ensure that a single build executes at a time on the DM Production stack
build_lock = locks.SlaveLock("slave_builds", maxCount = 1, 
     maxCountForSlave = {'LSST_SLAVE8': 1})

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property
from buildbot.config import BuilderConfig
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE

c['builders'] = []


#######
# DM stack    *** This is the actual Production Stack on lsst-dev ***
#
# This slave needs to conform to the directory layout of the pre-existing
# 'lsstsw' account which itself mimics the lsstsw installation's layout.
#  It is not buildbot friendly.
#
# The slavebuilddir base is one level higher than the invoking account
#  home directory so that the package's residuals are positioned as required.
#
# This build assumes the full DM stack structure exists. If that is not true,
# the build needs to fail and backup recovery methods need to recover the full
# stack from the last valid state. This stack is the lsst-dev shared DM stack.

factory = BuildFactory()
factory.addStep(ShellCommand( 
         command=[SLAVE_SCRIPTS_DIR+"/lsstswBuild.sh",
             "--branch", Property("branch"),
             "--builder_name", Property("buildername"),
             "--build_number", Property("buildnumber")],
         workdir="lsstsw2", description="lsstsw Build", timeout=16200,
         ))

c['builders'].append(BuilderConfig(
    name="DM_stack",
    description=["DM stack build"],
    slavename="BUILDBOT_SLAVE8",
    locks=[build_lock.access('exclusive')],
    builddir='builds/DM_stack',
    slavebuilddir='/usr/local/home',
    factory=factory))

#######
# Rebuild       full stack rebuild - this is for demo only. DM BB will use only
#               "DM stack"  which assumes the full stack structure is
#               already in place and only package updates are handled.
factory = BuildFactory()
factory.addStep(ShellCommand( command=["pwd"], description="PrintWD"))
factory.addStep(ShellCommand( command=["ls", "-al"], description="SimpleLs"))
factory.addStep(ShellCommand( 
         command=[SLAVE_SCRIPTS_DIR+"/bbLsstswBuild.sh",
             "--branch",  Property("branch"),
             "--builder_name", Property("buildername"),
             "--build_number", Property("buildnumber"),
             "--step_number", Property("stepnumber")],
         workdir="work", description="bbLsstswBuild", timeout=16200,
         ))

c['builders'].append(BuilderConfig(
    name="rebuild",
    description=["reuse build"],
    slavename="BUILDBOT_SLAVE2",
    builddir='builds/rebuild',
    slavebuilddir=SLAVE_BUILDS_DIR+'/rebuild',
    factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

#-- Send Build Status via email
from buildbot.status.builder import Results
import cgi, datetime
import smtplib
from buildbot.status import html
from buildbot.status import mail
from string import maketrans
import os
import re

# Build the Body of the email message used by the formatter
def build_mailBody(mode, name, build, results, master_status):
    result = Results[results]
    buildProperties = build.getProperties()
    buildNumber = buildProperties['buildnumber']
    buildSlaveHostName = build.getSlavename()

    buildHome = buildProperties['workdir']
    eupsPath = "%s/lsstsw2/stack" %(buildHome)

    text = list()
    text.append(u'<h3>Build status: %s</h3>' % result.upper())
    text.append(u'<table cellspacing="10">')
    text.append(u"<tr><td>Build: </td><td><b>%s    Build #:%s</b></td>" %(name,buildNumber))
    text.append(u"<tr><td>Eups Path: </td><td><b>%s</b></td></tr>" % eupsPath)
    if master_status.getURLForThing(build):
        text.append(u'<tr><td>Build Summary & Log:</td><td><a href="%s">%s</a></td></tr>'
                    % (master_status.getURLForThing(build),
                       master_status.getURLForThing(build))
                    )
        text.append(u'<tr><td>Build Reason:</td><td>%s</td></tr>' % build.getReason())
        text.append(u'</table>')

        logs = build.getLogs()
        text.append(u"<h3>Failed Build</h3>")
        limit_lines = 30
        for log in logs:
            if log.getName() != 'stdio':
                continue
            status, dummy = log.getStep().getResults()
            # status=0: SUCCESS status=1:WARNINGS  status=2:FAILURE
            name = "%s.%s" % (log.getStep().getName(), log.getName())
            status, dummy = log.getStep().getResults()
            content = log.getText().splitlines() # Note: can be VERY LARGE
            url = u'%s/steps/%s/logs/%s' % (master_status.getURLForThing(build),
                                           log.getStep().getName(),
                                           log.getName())
            text.append(u'<h4>Last %d lines of: <a href="%s">logs</a>, Status: %s</h4>' % (limit_lines, url, status))
            unilist = list()
            # Tags indicating SCONS error output in log: '^*** ' '^::::: ' 'ERROR '
            p = re.compile(r"^\*\*\* *|^::::: *|ERROR *")
            if p :
                errorLines = []
                for line in content:
                    if p.search(line):
                         errorLines.append(line)
                if len(errorLines) == 0:
                    # No SCONS error so message sent to Buildbot Nanny
                    sendTo = BUILDBOT_EMAIL
                    for line in content[len(content)-limit_lines:]:
                        unilist.append(cgi.escape(unicode(line,'utf-8')))
                else:
                    # SCONS error so message sent to lsst-data
                    sendTo = LSST_DATA_EMAIL
                    for line in errorLines:
                        unilist.append(cgi.escape(unicode(line,'utf-8')))
            text.append(u'<pre>'.join([uniline for uniline in unilist]))
            text.append(u'</pre>')
    return text,sendTo

# Notify mail_list on Build failure
def html_MasterFormatter(mode, name, build, results, master_status):
    """Provide a customized message to Buildbot's MailNotifier.

    The last ## lines of the log are provided. Message content is formatted as html.
    """
    # Build complete email message and load into 'text'
    text,receivers = build_mailBody(mode, name, build, results, master_status)
    print "SMTP SendTo: %s" % receivers
    receivers = 'BB <robyn@lsst.org>'

    # Following sends out mail to dynamic email list; to be used only for SCONS err
    if  BUILDBOT_EMAIL == receivers:
        sender = 'Buildbot Terror <robyn@LSST.org>'
        message = """\
From: %s
To: %s
MIME-Version: 1.0
Content-type: text/html
Subject: %s ... failure you should review.

<br>%s
""" % ( sender, receivers, name, u"\n".join(text) )
        try:
            smtpObj = smtplib.SMTP('localhost')
            smtpObj.sendmail(sender, receivers.split(','), message)
            print "Successfully sent email to:", receivers
        except SMTPException:
            print "Error: unable to send email"

# Following sends out the official mailNotifier mail to static email list
    return {
        'body': u"\n".join(text),
        'type': 'html'
        }

# Notify mail_list on Master or Branch build failures
c['status'].append(mail.MailNotifier(fromaddr=BUILDBOT_EMAIL,
    mode=["failing", "warnings"],
    subject="%(builder)s ... build failure",
    extraRecipients=[BUILDBOT_EMAIL],
    sendToInterestedUsers=False,
    messageFormatter=html_MasterFormatter))


from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

# Rebuild can be started/stopped/killed by anyone.
# Action on the 'real' stack (DM_Stack & ON_GIT_CHANGE) only by those shown.
def canForceBuild(username, builder_status):
    if builder_status.getName() in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa' , 'russell' , 'everyman') :
        return True
    else:
        return False

def canStopBuild(username, build_status):
    builderName = build_status.getBuilder().getName()
    if builderName in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa', 'russell' ) :
        return True
    else:
        return False

def canCancelPendingBuild(username,build_request):
    if build_request.original_builder.name in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa', 'russell' ) :
        return True
    else:
        return False


authz_cfg=Authz(auth=(HTPasswdAuth(HTPASSWD)),
    # change any of these to True to enable; see the manual for more options
    gracefulShutdown = False,
    forceBuild = canForceBuild,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = canStopBuild,
    stopAllBuilds = False,
    cancelPendingBuild = canCancelPendingBuild,
)
c['status'].append(WebStatus(http_port='tcp:'+BB_PORT, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "LSST Data Management"
c['titleURL'] = "https://dev.lsstcorp.org/buildx"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = BUILDBOT_URL

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
