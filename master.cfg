# -*- python -*-
# ex: set syntax=python:

# This is buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#=========================================================================
#  Shared Globals
#=========================================================================
##### Web Locators
# Buildbot http server
BB_PORT=str(8010)
BUILDBOT_URL="http://lsst-buildx.ncsa.illinois.edu:"+BB_PORT+"/"
# Location of the build's logs; used in every remote slave command
BUILDLOG_URL=BUILDBOT_URL+"/buildlogs/"
# Web access to DM git repositories
LSST_DMS="git@git.lsstcorp.org:LSST/DMS/"
# Web access for DM documentation
DOXY_URL="http://lsst-web.ncsa.illinois.edu/~buildbot/doxygen"
DOXY_DEST="lsst-build3.ncsa.illinois.edu:/lsst/home/buildbot/public_html/doxygen"

# Slave systems
BUILDBOT_SLAVE1="lsst-buildx1.ncsa.illinois.edu"
BUILDBOT_SLAVE2="lsst-buildx2.ncsa.illinois.edu"
BUILDBOT_SLAVE3="lsst-buildx3.ncsa.illinois.edu"
#BUILDBOT_SLAVE4="lsst-buildx4.ncsa.illinois.edu"
#BUILDBOT_SLAVE5="lsst-buildx5.ncsa.illinois.edu"
#BUILDBOT_SLAVE6="lsst-buildx6.ncsa.illinois.edu"

# Slave Aliases (can have multiple aliases hosted on same slave)
RUNTESTS_SLAVE        = BUILDBOT_SLAVE3
REBUILD_SLAVE         = BUILDBOT_SLAVE2
FRESH_BUILD_SLAVE     = BUILDBOT_SLAVE3

# Master's Authentication file
HTPASSWD='/usr/local/home/buildbot/master/.htpasswd'

# Slaves' Primary Directories 
BUILDBOT_HOME = "/lsst/home/buildbot/RHEL6/"
SLAVE_HOME_DIR = BUILDBOT_HOME+"/buildslaves"
SLAVE_BUILDS_DIR = BUILDBOT_HOME+"/builds"
SLAVE_SCRIPTS_DIR = BUILDBOT_HOME+ "/scripts"

# File containing email addresses for those assigned build failure
BLAME_LIST="BlameNotification.list"
# Make sure whatever email provided below is listserv-allowed.
BUILDBOT_EMAIL="robyn@lsst.org"

####### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

####
# These slave names match the subdirectory where the build logs are maintained.
#        and where the buildslave's configuration is found. Keep this template.
c['slaves'] = [
    BuildSlave("BUILDBOT_SLAVE1", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE2", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE3", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE4", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE5", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE6", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1)
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured in the buildslaves (w/ --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  

# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
# This block needs to be changed to acquire the complete set of DM git repos
#     Then also change to DM git repo web address.
# /\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\
from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

c['change_source'].append(GitPoller(
    LSST_DMS+'/afw.git',
    workdir='gitpoller-workdir', branch='master',
    pollinterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(name="all",
    change_filter=filter.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["runtests"]))
# >>>>> Postpone scheduled rebuild for now
#    c['schedulers'].append(Nightly(name="rebuild",
#        hour=16, minute=5, 
#        builderNames=["rebuild"], branch='master'))
c['schedulers'].append(ForceScheduler(name="force",
    builderNames=["runtests", "rebuild", "fresh_build"]))

####### LOGS

from buildbot.steps.shell import ShellCommand
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE

class LogFileShellCommand(ShellCommand):
    log_files = []
    log_files.append("config.log")
    log_files.append("build.log")

    def __init__(self, **kwargs):
        # And upcall to let the base class do its work
        ShellCommand.__init__(self, **kwargs)

    def createSummary(self, log):
        for line in log.getText().split("\n"):
            for log_file in self.log_files:
                # line format is "    log file build.log saved to https://dev.lsstcorp.org/...."
                if (line.startswith("log file ") and line.find(" saved to ") >= 0):
                    split = line.split(" saved to ", 1)
                    self.addURL(split[0].split("log file ")[1], split[1])

    def evaluateCommand(self, cmd):
    # Steps should return exit status of 2 to indicate non-fatal warning
        #if self.log_eval_func: 
        #    return self.log_eval_func(cmd, self.step_status) 
        if cmd.rc == 0:
            return SUCCESS
        if cmd.rc == 2:
            return WARNINGS
        return FAILURE

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property
from buildbot.config import BuilderConfig

c['builders'] = []


#######
# Pyflakes test  - testing a build occurs
factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

c['builders'].append(BuilderConfig(
    name="runtests",
    slavenames=["BUILDBOT_SLAVE3"],
    factory=factory))

#######
# Rebuild       full stack rebuild
factory = BuildFactory()
factory.addStep(LogFileShellCommand( command=["pwd"], description="PrintWD"))
factory.addStep(LogFileShellCommand( command=["ls", "-al"], description="SimpleLs"))
factory.addStep(LogFileShellCommand( 
         command=[SLAVE_SCRIPTS_DIR+"/bbTesting.sh",
             "--builder_name", Property("buildername"),
             "--build_number", Property("buildnumber")], 
         workdir="build/work", description="bbTesting", timeout=12000,
         ))

c['builders'].append(BuilderConfig(
    name="rebuild",
    description=["pwd and list"],
    slavenames=["BUILDBOT_SLAVE2"],
    env={'MY_FAKE_PATH': '/this/is/a/fake/directory'},
    slavebuilddir=SLAVE_BUILDS_DIR+'/rebuild',
    factory=factory))

#######
# FreshBuild
factory = BuildFactory()
factory.addStep(LogFileShellCommand( 
         command=[SLAVE_SCRIPTS_DIR+"/bbTesting.sh", "--newbuild", 
             "--builder_name", Property("buildername"),
             "--build_number", Property("buildnumber")],
         workdir="work", description="bbTesting", timeout=12000,
         ))

c['builders'].append(BuilderConfig(
    name="fresh_build",
    description=["pwd and list"],
    slavenames=["BUILDBOT_SLAVE3"],
    slavebuilddir=SLAVE_BUILDS_DIR+'/fresh_build',
    factory=factory))

####### STATUS TARGETS
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

def canForceBuild(username, builder_status):
    if builder_status.getName() in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa' , 'russell' ) :
        return True
    else:
        return False

def canStopBuild(username, build_status):
    builderName = build_status.getBuilder().getName()
    if builderName in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa', 'russell' ) :
        return True
    else:
        return False

def canCancelPendingBuild(username,build_request):
    if build_request.original_builder.name in ( "rebuild") :
        return True
    if username in ( 'srp', 'raa', 'russell' ) :
        return True
    else:
        return False


authz_cfg=Authz(auth=(HTPasswdAuth(HTPASSWD)),
    # change any of these to True to enable; see the manual for more options
    gracefulShutdown = False,
    forceBuild = canForceBuild,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = canStopBuild,
    stopAllBuilds = False,
    cancelPendingBuild = canCancelPendingBuild,
)
c['status'].append(WebStatus(http_port='tcp:'+BB_PORT, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "LSST Data Management"
c['titleURL'] = "https://dev.lsstcorp.org/buildx"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = BUILDBOT_URL
c['buildbotURL'] = "http://lsst-buildx.ncsa.illinois.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
