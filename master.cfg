# -*- python -*-
# ex: set syntax=python:

# This is buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#=========================================================================
#  Shared Globals
#=========================================================================
##### Web Locators
# Buildbot http server
BB_PORT=str(8010)
BUILDBOT_URL="http://lsst-buildx.ncsa.illinois.edu:"+BB_PORT+"/"
# Location of the build's logs; used in every remote slave command
BUILDLOG_URL=BUILDBOT_URL+"/buildlogs/"
# Web access to DM git repositories
LSST_DMS="git@git.lsstcorp.org:LSST/DMS/"
# Web access for DM documentation
DOXY_URL="http://lsst-web.ncsa.illinois.edu/~buildbot/doxygen"
DOXY_DEST="lsst-build3.ncsa.illinois.edu:/lsst/home/buildbot/public_html/doxygen"

# Slave systems
BUILDBOT_SLAVE1="lsst-buildx1.ncsa.illinois.edu"
BUILDBOT_SLAVE2="lsst-buildx2.ncsa.illinois.edu"
BUILDBOT_SLAVE3="lsst-buildx3.ncsa.illinois.edu"
BUILDBOT_SLAVE4="lsst-buildx4.ncsa.illinois.edu"
BUILDBOT_SLAVE5="lsst-buildx5.ncsa.illinois.edu"
BUILDBOT_SLAVE6="lsst-buildx6.ncsa.illinois.edu"

# Master's Authentication file
HTPASSWD='/usr/local/home/buildbot/master/.htpasswd'

# Slaves' Primary Directories 
BUILDBOT_HOME = "/lsst/home/buildbot/RHEL6/"
SLAVE_HOME_DIR = BUILDBOT_HOME+"/buildslaves"
SLAVE_BUILDS_DIR = BUILDBOT_HOME+"/builds"
SLAVE_SCRIPTS_DIR = BUILDBOT_HOME+ "/scripts"

# File containing email addresses for those assigned build failure
BLAME_LIST="BlameNotification.list"
# Make sure whatever email provided below is listserv-allowed.
BUILDBOT_EMAIL="bmather@ncsa.illinois.edu robyn@lsst.org"

####### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [
    BuildSlave("BUILDBOT_SLAVE1", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE2", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE3", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE4", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE5", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1),
    BuildSlave("BUILDBOT_SLAVE6", "buildpassx1", notify_on_missing=BUILDBOT_EMAIL, missing_timeout=300, max_builds=1)
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
    'git://github.com/buildbot/pyflakes.git',
    workdir='gitpoller-workdir', branch='master',
    pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["trial", "pyflakes"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["BUILDBOT_SLAVE1"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# SETUP  /\/\/\/\/\/\/\/\     Install after test of basic auth functionality working
# authz_cfg = authz.Authz(auth=(HTPasswdAuth(HTPASSWD)),
#                             Then port over functions to limit specific users
#/\/\/\/\/\/\/\/\/\/\/\/\
authz_cfg=authz.Authz(
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    # change any of these to True to enable; see the manual for more options
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=BB_PORT, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "LSST Data Management"
c['titleURL'] = "https://dev.lsstcorp.org/buildx"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = BUILDBOT_URL
c['buildbotURL'] = "http://lsst-buildx.ncsa.illinois.edu:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
